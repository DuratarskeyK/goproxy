diff --git a/certs.go b/certs.go
index 8da2e62..3f272e9 100644
--- a/certs.go
+++ b/certs.go
@@ -21,36 +21,38 @@ var defaultTLSConfig = &tls.Config{
 	InsecureSkipVerify: true,
 }
 
-var CA_CERT = []byte(`-----BEGIN CERTIFICATE-----
-MIICSjCCAbWgAwIBAgIBADALBgkqhkiG9w0BAQUwSjEjMCEGA1UEChMaZ2l0aHVi
-LmNvbS9lbGF6YXJsL2dvcHJveHkxIzAhBgNVBAMTGmdpdGh1Yi5jb20vZWxhemFy
-bC9nb3Byb3h5MB4XDTAwMDEwMTAwMDAwMFoXDTQ5MTIzMTIzNTk1OVowSjEjMCEG
-A1UEChMaZ2l0aHViLmNvbS9lbGF6YXJsL2dvcHJveHkxIzAhBgNVBAMTGmdpdGh1
-Yi5jb20vZWxhemFybC9nb3Byb3h5MIGdMAsGCSqGSIb3DQEBAQOBjQAwgYkCgYEA
-vz9BbCaJjxs73Tvcq3leP32hAGerQ1RgvlZ68Z4nZmoVHfl+2Nr/m0dmW+GdOfpT
-cs/KzfJjYGr/84x524fiuR8GdZ0HOtXJzyF5seoWnbBIuyr1PbEpgRhGQMqqOUuj
-YExeLbfNHPIoJ8XZ1Vzyv3YxjbmjWA+S/uOe9HWtDbMCAwEAAaNGMEQwDgYDVR0P
-AQH/BAQDAgCkMBMGA1UdJQQMMAoGCCsGAQUFBwMBMA8GA1UdEwEB/wQFMAMBAf8w
-DAYDVR0RBAUwA4IBKjALBgkqhkiG9w0BAQUDgYEAIcL8huSmGMompNujsvePTUnM
-oEUKtX4Eh/+s+DSfV/TyI0I+3GiPpLplEgFWuoBIJGios0r1dKh5N0TGjxX/RmGm
-qo7E4jjJuo8Gs5U8/fgThZmshax2lwLtbRNwhvUVr65GdahLsZz8I+hySLuatVvR
-qHHq/FQORIiNyNpq/Hg=
------END CERTIFICATE-----`)
+// var CA_CERT = []byte(`-----BEGIN CERTIFICATE-----
+// MIICSjCCAbWgAwIBAgIBADALBgkqhkiG9w0BAQUwSjEjMCEGA1UEChMaZ2l0aHVi
+// LmNvbS9lbGF6YXJsL2dvcHJveHkxIzAhBgNVBAMTGmdpdGh1Yi5jb20vZWxhemFy
+// bC9nb3Byb3h5MB4XDTAwMDEwMTAwMDAwMFoXDTQ5MTIzMTIzNTk1OVowSjEjMCEG
+// A1UEChMaZ2l0aHViLmNvbS9lbGF6YXJsL2dvcHJveHkxIzAhBgNVBAMTGmdpdGh1
+// Yi5jb20vZWxhemFybC9nb3Byb3h5MIGdMAsGCSqGSIb3DQEBAQOBjQAwgYkCgYEA
+// vz9BbCaJjxs73Tvcq3leP32hAGerQ1RgvlZ68Z4nZmoVHfl+2Nr/m0dmW+GdOfpT
+// cs/KzfJjYGr/84x524fiuR8GdZ0HOtXJzyF5seoWnbBIuyr1PbEpgRhGQMqqOUuj
+// YExeLbfNHPIoJ8XZ1Vzyv3YxjbmjWA+S/uOe9HWtDbMCAwEAAaNGMEQwDgYDVR0P
+// AQH/BAQDAgCkMBMGA1UdJQQMMAoGCCsGAQUFBwMBMA8GA1UdEwEB/wQFMAMBAf8w
+// DAYDVR0RBAUwA4IBKjALBgkqhkiG9w0BAQUDgYEAIcL8huSmGMompNujsvePTUnM
+// oEUKtX4Eh/+s+DSfV/TyI0I+3GiPpLplEgFWuoBIJGios0r1dKh5N0TGjxX/RmGm
+// qo7E4jjJuo8Gs5U8/fgThZmshax2lwLtbRNwhvUVr65GdahLsZz8I+hySLuatVvR
+// qHHq/FQORIiNyNpq/Hg=
+// -----END CERTIFICATE-----`)
+var CA_CERT = []byte("-----BEGIN CERTIFICATE-----\nMIIC5DCCAcygAwIBAgIQXO4QJIKF7QigtZiEtBiwJjANBgkqhkiG9w0BAQsFADAA\nMB4XDTE2MDEyMzE3MTg0NVoXDTI2MDEyMDE3MTg0NVowADCCASIwDQYJKoZIhvcN\nAQEBBQADggEPADCCAQoCggEBANPdwufJajG29dPoETUKmyRzZiiezBXBEuG1eoCR\nGASEldPsfwSAFOtNXv5m5/bgd4mm01+u4eXvlecDPuqZWyc52U/BkiBnLuQoBo5a\nVxjGv1A6QFgElJ8SRZXd+9yxZqlyHVYH4efOoU0u62LdgQiJ99Rkry2aMny2PLKP\noSwTcHOYxSaJhFBNEqSZlOfhOsBR22y4w6VCNb3+jFWhNzaYee3oegQLhArjm3+m\nHtXJHIkkknC8lTi74jupv6RmEGadnmDZEhsKPA+kqjYzfIWjES7M04AHg6G8LpkZ\nyQxfOtALpkdF+GHblzBCa1zN5S8JRADVMmRRbGH/wTEz6WUCAwEAAaNaMFgwDgYD\nVR0PAQH/BAQDAgKkMBMGA1UdJQQMMAoGCCsGAQUFBwMBMBIGA1UdEwEB/wQIMAYB\nAf8CAQEwHQYDVR0OBBYEFPq1RmsNXdqrPcJ9uI4rPxHJWjv1MA0GCSqGSIb3DQEB\nCwUAA4IBAQBv8pqjyBLdwdow0aG67rg6Rmz6pIN0QYzMqPc19K8WTXme+H7o4BNT\nI13K8S4qT1t+uTcBwh2dUACUnq6oFbBNDH6k68ziEy5MtcbJM6CqkWlyqdLIbjwa\nmrhP0kUUk5H23xSKEOwSrDJRukBngSzmadCYRYTz7ni6/AriiP0U9CLNOQfV8SbF\nvrY07rj6MTQc6GsYKrM9/hPQaYc++xp9A33OKTzDjr4cIxIzo9nlLUEz+bRceQ+V\nwLj1tZJxGgA1Ewyc+Z5D8j+YOKSoNSAeFEjTD4zhRCJyjEtQoyPbk4ADE802o1bd\nHnH/LoLCHEWcDxthmefQCPgUII4rif/L\n-----END CERTIFICATE-----\n")
 
-var CA_KEY = []byte(`-----BEGIN RSA PRIVATE KEY-----
-MIICXQIBAAKBgQC/P0FsJomPGzvdO9yreV4/faEAZ6tDVGC+VnrxnidmahUd+X7Y
-2v+bR2Zb4Z05+lNyz8rN8mNgav/zjHnbh+K5HwZ1nQc61cnPIXmx6hadsEi7KvU9
-sSmBGEZAyqo5S6NgTF4tt80c8ignxdnVXPK/djGNuaNYD5L+4570da0NswIDAQAB
-AoGBALzIv1b4D7ARTR3NOr6V9wArjiOtMjUrdLhO+9vIp9IEA8ZsA9gjDlCEwbkP
-VDnoLjnWfraff5Os6+3JjHy1fYpUiCdnk2XA6iJSL1XWKQZPt3wOunxP4lalDgED
-QTRReFbA/y/Z4kSfTXpVj68ytcvSRW/N7q5/qRtbN9804jpBAkEA0s6lvH2btSLA
-mcEdwhs7zAslLbdld7rvfUeP82gPPk0S6yUqTNyikqshM9AwAktHY7WvYdKl+ghZ
-HTxKVC4DoQJBAOg/IAW5RbXknP+Lf7AVtBgw3E+Yfa3mcdLySe8hjxxyZq825Zmu
-Rt5Qj4Lw6ifSFNy4kiiSpE/ZCukYvUXGENMCQFkPxSWlS6tzSzuqQxBGwTSrYMG3
-wb6b06JyIXcMd6Qym9OMmBpw/J5KfnSNeDr/4uFVWQtTG5xO+pdHaX+3EQECQQDl
-qcbY4iX1gWVfr2tNjajSYz751yoxVbkpiT9joiQLVXYFvpu+JYEfRzsjmWl0h2Lq
-AftG8/xYmaEYcMZ6wSrRAkBUwiom98/8wZVlB6qbwhU1EKDFANvICGSWMIhPx3v7
-MJqTIj4uJhte2/uyVvZ6DC6noWYgy+kLgqG0S97tUEG8
------END RSA PRIVATE KEY-----`)
+// var CA_KEY = []byte(`-----BEGIN RSA PRIVATE KEY-----
+// MIICXQIBAAKBgQC/P0FsJomPGzvdO9yreV4/faEAZ6tDVGC+VnrxnidmahUd+X7Y
+// 2v+bR2Zb4Z05+lNyz8rN8mNgav/zjHnbh+K5HwZ1nQc61cnPIXmx6hadsEi7KvU9
+// sSmBGEZAyqo5S6NgTF4tt80c8ignxdnVXPK/djGNuaNYD5L+4570da0NswIDAQAB
+// AoGBALzIv1b4D7ARTR3NOr6V9wArjiOtMjUrdLhO+9vIp9IEA8ZsA9gjDlCEwbkP
+// VDnoLjnWfraff5Os6+3JjHy1fYpUiCdnk2XA6iJSL1XWKQZPt3wOunxP4lalDgED
+// QTRReFbA/y/Z4kSfTXpVj68ytcvSRW/N7q5/qRtbN9804jpBAkEA0s6lvH2btSLA
+// mcEdwhs7zAslLbdld7rvfUeP82gPPk0S6yUqTNyikqshM9AwAktHY7WvYdKl+ghZ
+// HTxKVC4DoQJBAOg/IAW5RbXknP+Lf7AVtBgw3E+Yfa3mcdLySe8hjxxyZq825Zmu
+// Rt5Qj4Lw6ifSFNy4kiiSpE/ZCukYvUXGENMCQFkPxSWlS6tzSzuqQxBGwTSrYMG3
+// wb6b06JyIXcMd6Qym9OMmBpw/J5KfnSNeDr/4uFVWQtTG5xO+pdHaX+3EQECQQDl
+// qcbY4iX1gWVfr2tNjajSYz751yoxVbkpiT9joiQLVXYFvpu+JYEfRzsjmWl0h2Lq
+// AftG8/xYmaEYcMZ6wSrRAkBUwiom98/8wZVlB6qbwhU1EKDFANvICGSWMIhPx3v7
+// MJqTIj4uJhte2/uyVvZ6DC6noWYgy+kLgqG0S97tUEG8
+// -----END RSA PRIVATE KEY-----`)
+var CA_KEY = []byte("-----BEGIN RSA PRIVATE KEY-----\nMIIEpQIBAAKCAQEA093C58lqMbb10+gRNQqbJHNmKJ7MFcES4bV6gJEYBISV0+x/\nBIAU601e/mbn9uB3iabTX67h5e+V5wM+6plbJznZT8GSIGcu5CgGjlpXGMa/UDpA\nWASUnxJFld373LFmqXIdVgfh586hTS7rYt2BCIn31GSvLZoyfLY8so+hLBNwc5jF\nJomEUE0SpJmU5+E6wFHbbLjDpUI1vf6MVaE3Nph57eh6BAuECuObf6Ye1ckciSSS\ncLyVOLviO6m/pGYQZp2eYNkSGwo8D6SqNjN8haMRLszTgAeDobwumRnJDF860Aum\nR0X4YduXMEJrXM3lLwlEANUyZFFsYf/BMTPpZQIDAQABAoIBAQC6cz/SkhvFspj2\nqxVxk2rjEjeGafF695YxUm+Dc60qVLAyd790a299gHKn+lILnpE0b783RoWAwG8w\nhVe6R8nDZJKNMPHzWDsZCOx0HKbnpAi7hvgXPbi5oO/iKyA6oViSqF2O15MEWID1\nluQJ9ptWs2yJ2y2bOUdTH2GdVu9lA/9e0wV55fx9uFj4pHODaJm1qKOl1Jk0i7zy\nwUGzmJgXvzYnq9h7XErfPcOsh6Rpkc9a0VpKVgmZtBzzikqcM62OgO9BxqCqFN7U\niBiR9Xq5FyfaeXnPYW/qV1i3dgdd4wRmO3ksQNSPf7cLE122WbVuYFw5dIiyw7lK\ndsyXDW7FAoGBAPurwwBk0n3p0BlZDXx56JO/IOjfP+p4skoG9opxcOVznA0zA9p0\npSezNecimyh6AiPFApruLvIRk+crMZQRVADEQ/MhzvXedEvevtI8SlEKrV9UgRcn\nbp62EZqagf1AJEDWC6G+DxEv1s3ZF4Y7bdHWLDFAv4Ciw7bjQZVDdDq/AoGBANeC\nuAYUtQDxLMuOAWidW6SX4wMUg05AiVPAKka7NIq8H1ylFNpnEjYi9Af4BZeA1/IO\neQWap101qbqW/tIlgnwR6NSLfLSvFCSon0ysQ9lHNJhmC7YOoDQRQHQssIrbJaN3\nQ6JxVZ10Un8IowqxDZIVfXCFuw5fNorOv9hAbFjbAoGAJzBGzB/m+v5WjivkwrZE\n9gSz/i8NR9iFgqt05nflqYUIDrIb7n9tXDI2uYgU+weMn79EuZVPMBh2nG+IZ9MO\n7pOhNRHVpUl/eHT158zFkbsE5ixFcbKNMh+NvDJE/YdoXcQ2yXfL5tQ5MZKVbCyC\n3ELqXL0FVOWDbk4S30hCqAcCgYEAo2+R6aKohjdgllpyPQkhJ9i8I2jaD20n+CjC\npvNv7EqwqgzTnLIQAJhPYv+4FeZzXjGVnCdmB20b89JxG6OwqjDW1uGVyF0CNK7g\naEA4ED5M58pz1TSQUAxJShFeLV/20lovI7E5kXhW29oL857EQOYlREFW05Zngas7\nmF97C4MCgYEAj3bNc1qsHiHXlpzhEA3zWSOVMI4gBin9NZihrr8FO5W621BD8uu7\noWAkjT0AziDvmjdnODdUcAGOd3KX5bYpKuiYCNN3E6MvOhreaurJH23xJM+nsJcR\nzoVMfHWf6lDLzBU96kHtQzaokNoq3TNr8N8prqu2h9poyu5ZNhcrN0Q=\n-----END RSA PRIVATE KEY-----\n")
 
 var GoproxyCa, goproxyCaErr = tls.X509KeyPair(CA_CERT, CA_KEY)
diff --git a/examples/goproxy-basic/main.go b/examples/goproxy-basic/main.go
index 22dc4a9..564f062 100644
--- a/examples/goproxy-basic/main.go
+++ b/examples/goproxy-basic/main.go
@@ -3,15 +3,74 @@ package main
 import (
 	"github.com/elazarl/goproxy"
 	"log"
-	"flag"
 	"net/http"
+	"net"
+	"fmt"
+	"sync"
+	"time"
+	"os"
 )
 
+var localToTransport map[string]*http.Transport
+var localToTransportMu sync.RWMutex
+var remoteToLocal map[string]string
+var remoteToLocalMu sync.RWMutex
+
+func ConnState(c net.Conn, state http.ConnState) {
+	host, _, _ := net.SplitHostPort(c.LocalAddr().String())
+	if state == http.StateNew {
+		remoteToLocalMu.Lock()
+		remoteToLocal[c.RemoteAddr().String()] = host
+		remoteToLocalMu.Unlock()
+	} else if state == http.StateClosed || state == http.StateHijacked {
+		remoteToLocalMu.Lock()
+		delete(remoteToLocal, host)
+		remoteToLocalMu.Unlock()
+	}
+}
+
+func getTransportForLocalAddr(localAddr string) *http.Transport {
+	localToTransportMu.RLock()
+	transport, ok := localToTransport[localAddr]
+	localToTransportMu.RUnlock()
+	if ok {
+		return transport
+	}
+
+	localToTransportMu.Lock()
+	transport = &http.Transport{
+		Proxy: http.ProxyFromEnvironment,
+		DialContext: (&net.Dialer{
+						Timeout:   30 * time.Second,
+						KeepAlive: 30 * time.Second,
+						DualStack: true,
+						LocalAddr: &net.TCPAddr{IP: net.ParseIP(localAddr)},
+		}).DialContext,
+	}
+	localToTransport[localAddr] = transport
+	localToTransportMu.Unlock()
+	return transport
+}
+
+func ConnectDial()
+
 func main() {
-	verbose := flag.Bool("v", false, "should every proxy request be logged to stdout")
-	addr := flag.String("addr", ":8080", "proxy listen address")
-	flag.Parse()
+	localToTransport = make(map[string]*http.Transport)
+	localToTransportMu = sync.RWMutex{}
+	remoteToLocal = make(map[string]string)
+	remoteToLocalMu = sync.RWMutex{}
 	proxy := goproxy.NewProxyHttpServer()
-	proxy.Verbose = *verbose
-	log.Fatal(http.ListenAndServe(*addr, proxy))
+	server := &http.Server{
+		Addr: ":8080",
+		Handler: proxy,
+		ConnState: ConnState}
+	proxy.OnRequest().DoFunc(func(req *http.Request, ctx *goproxy.ProxyCtx) (*http.Request, *http.Response) {
+		tr := getTransportForLocalAddr(remoteToLocal[req.RemoteAddr])
+		ctx.RoundTripper = goproxy.RoundTripperFunc(func(req *http.Request, ctx *goproxy.ProxyCtx) (resp *http.Response, err error) {
+			resp, err = tr.RoundTrip(req)
+			return
+		})
+		return req, nil
+	})
+	log.Fatal(server.ListenAndServe())
 }
diff --git a/https.go b/https.go
index 139f88d..ce9fbc1 100644
--- a/https.go
+++ b/https.go
@@ -57,11 +57,11 @@ func (proxy *ProxyHttpServer) dial(network, addr string) (c net.Conn, err error)
 	return net.Dial(network, addr)
 }
 
-func (proxy *ProxyHttpServer) connectDial(network, addr string) (c net.Conn, err error) {
+func (proxy *ProxyHttpServer) connectDial(network, addr string, ctx *ProxyCtx) (c net.Conn, err error) {
 	if proxy.ConnectDial == nil {
 		return proxy.dial(network, addr)
 	}
-	return proxy.ConnectDial(network, addr)
+	return proxy.ConnectDial(network, addr, ctx)
 }
 
 func (proxy *ProxyHttpServer) handleHttps(w http.ResponseWriter, r *http.Request) {
@@ -94,7 +94,7 @@ func (proxy *ProxyHttpServer) handleHttps(w http.ResponseWriter, r *http.Request
 		if !hasPort.MatchString(host) {
 			host += ":80"
 		}
-		targetSiteCon, err := proxy.connectDial("tcp", host)
+		targetSiteCon, err := proxy.connectDial("tcp", host, ctx)
 		if err != nil {
 			httpError(proxyClient, ctx, err)
 			return
@@ -127,7 +127,7 @@ func (proxy *ProxyHttpServer) handleHttps(w http.ResponseWriter, r *http.Request
 	case ConnectHTTPMitm:
 		proxyClient.Write([]byte("HTTP/1.0 200 OK\r\n\r\n"))
 		ctx.Logf("Assuming CONNECT is plain HTTP tunneling, mitm proxying it")
-		targetSiteCon, err := proxy.connectDial("tcp", host)
+		targetSiteCon, err := proxy.connectDial("tcp", host, ctx)
 		if err != nil {
 			ctx.Warnf("Error dialing to %s: %s", host, err.Error())
 			return
diff --git a/proxy.go b/proxy.go
index fefb3bb..e154721 100644
--- a/proxy.go
+++ b/proxy.go
@@ -26,7 +26,7 @@ type ProxyHttpServer struct {
 	Tr              *http.Transport
 	// ConnectDial will be used to create TCP connections for CONNECT requests
 	// if nil Tr.Dial will be used
-	ConnectDial func(network string, addr string) (net.Conn, error)
+	ConnectDial func(network string, addr string, ctx *ProxyCtx) (net.Conn, error)
 }
 
 var hasPort = regexp.MustCompile(`:\d+$`)
@@ -157,6 +157,8 @@ func NewProxyHttpServer() *ProxyHttpServer {
 		Tr: &http.Transport{TLSClientConfig: tlsClientSkipVerify,
 			Proxy: http.ProxyFromEnvironment},
 	}
-	proxy.ConnectDial = dialerFromEnv(&proxy)
+	proxy.ConnectDial = func(network string, addr string, ctx *ProxyCtx) (net.Conn, error) {
+		return dialerFromEnv(&proxy)(network, addr)
+	}
 	return &proxy
 }
